# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: E2E API Tests on GKE Microservices on approval
on:
  pull_request_review:
    types: [submitted]
    branches:
      - main

    paths:
      - "microservices/**"
      - "common/**"
      - "e2e/**"
      - "utils/**"
      - ".github/workflows/e2e_gke_api_test_approve.yaml"
      - "skaffold.yaml"
  workflow_dispatch:
env:
  PROJECT_ID: core-learning-services-dev
  SKAFFOLD_DEFAULT_REPO: gcr.io/core-learning-services-dev
  GKE_CLUSTER: core-learning-services-dev-us-central1
  GKE_ZONE: us-central1
  KUSTOMIZE_VERSION: 4.1.3
  SKAFFOLD_VERSION: 1.39.2
  SKAFFOLD_CACHE_GCS: gs://core-learning-services-dev.appspot.com/skaffold/cache
  # CLASSROOM_ADMIN_EMAIL: ${{ secrets.CLASSROOM_ADMIN_EMAIL }}
  CLASSROOM_ADMIN_EMAIL: lms_admin_teacher@dhodun.altostrat.com
  GKE_POD_SA_KEY: ${{ secrets.GKE_POD_SA_KEY }}
  FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  CLOUD_LOGGING_ENABLED: False
  API_DOMAIN: ${{ secrets.API_DOMAIN }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  USE_GMAIL_ACCOUNT_STUDENT_ENROLLMENT: True
# cookiecutter:raw
jobs:
  deploy:
    if: github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'LMS')
    name: Deploy all microservices in PR namespace on approval
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: "Set up Gcloud auth"
        id: "gcloud_auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.DEPLOYMENT_DEV_SA_KEY }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Install Kustomize
        run: |
          wget -O kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v$KUSTOMIZE_VERSION/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
          sudo tar -xvf kustomize.tar.gz -C /usr/local/bin/

      - name: Install Skaffold release binary
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v$SKAFFOLD_VERSION/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/skaffold

      - name: Set default repo for Skaffold
        run: |
          skaffold config set default-repo "$SKAFFOLD_DEFAULT_REPO"

      - name: Download Skaffold cache if exists
        run: |
          gsutil cp $SKAFFOLD_CACHE_GCS ~/.skaffold/ || true

      - name: Set up Kubernetes namespace and Service Account
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-approval-$PR_NUMBER
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          NAMESPACE=${NAMESPACE} bash setup/setup_ksa.sh

      - name: Add indexing to collections in firestore
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          export DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_
          cd utils/
          python -m pip install -r requirements.txt
          PYTHONPATH=../common/src python firestore_indexing.py

      - name: Initialize Pub/Sub
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e
          python -m pip install -r requirements.txt
          cd utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python pub_sub_setup.py

      - name: Initialize BQ
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd utils/
          python -m pip install -r requirements.txt
          BQ_DATASET=lms_analytics DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python bq_setup.py --create-dataset=true

      - name: Build and deploy to cluster
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-approval-$PR_NUMBER
          export DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_
          skaffold run \
          --profile dev \
          --namespace $NAMESPACE \
          --module backends \
          -l commit=$GITHUB_SHA \
          --tag PR${{ github.event.pull_request.number }}

      - name: Checkout external repo
        id: checkout_external_repo
        uses: actions/checkout@v3
        with:
          repository: GPS-Solutions/ailearning-backend
          ref: df352edb8c4572c87c88896245af3c3db8bcb5cc
          # adding run_id so we can fold in the repo without collision
          path: ${{ format('ailearning-backend_{0}', github.run_id) }}
          token: ${{ secrets.GH_PAT }}

      - name: Build and deploy external services to cluster
        run: |
          pushd ${{ format('ailearning-backend_{0}', github.run_id) }}
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-approval-$PR_NUMBER
          export DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_
          export GCP_PROJECT=$PROJECT_ID
          skaffold run \
          -p custom \
          --module authentication,redis,user-management,student-learner-profile,learning-record-service \
          --namespace $NAMESPACE \
          -l commit=$GITHUB_SHA \
          --tag PR${{ github.event.pull_request.number }} 
          popd

      - name: Upload Skaffold cache
        if: always()
        run: |
          gsutil cp ~/.skaffold/cache $SKAFFOLD_CACHE_GCS

  e2e-api-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'LMS')
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v3

      - name: "Set up Gcloud auth"
        id: "gcloud_auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.DEPLOYMENT_DEV_SA_KEY }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-custom_exit_code pytest-cov pylint pytest-mock mock
          python -m pip install -r e2e/requirements.txt

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Set up port forwarding
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-approval-$PR_NUMBER
          python e2e/utils/port_forward.py --namespace $NAMESPACE

      - name: Cleaning up database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python database_cleanup.py

      - name: Cleaning up classroom
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python classroom_cleanup.py

      - name: Wait for 5s for database cleaning up
        run: sleep 10s
        shell: bash

      - name: Initialize database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python database_setup.py

      - name: Run pytest
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PYTHONPATH=common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python -m pytest e2e/gke_api_tests/

      - name: Run behave
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PYTHONPATH=common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python -m behave e2e/features/

  dataset-cleanup:
    runs-on: ubuntu-latest
    needs: e2e-api-test
    if: github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'LMS')
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v3

      - name: "Set up Gcloud auth"
        id: "gcloud_auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.DEPLOYMENT_DEV_SA_KEY }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-custom_exit_code pytest-cov pylint pytest-mock mock
          python -m pip install -r e2e/requirements.txt

      - name: Removing firestore indexes
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          export DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_
          cd utils/
          python -m pip install -r requirements.txt
          PYTHONPATH=../common/src python firestore_indexing_cleanup.py

      - name: Cleaning up database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python database_cleanup.py

      - name: Cleaning up classroom
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python classroom_cleanup.py

  deployment-cleanup:
    name: Clean up deployment in PR namespace
    needs: e2e-api-test
    if: github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'LMS')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: "Set up Gcloud auth"
        id: "gcloud_auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.DEPLOYMENT_DEV_SA_KEY }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Install Kustomize
        run: |
          wget -O kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.0.4/kustomize_v4.0.4_linux_amd64.tar.gz
          sudo tar -xvf kustomize.tar.gz -C /usr/local/bin/

      - name: Install Skaffold release binary
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v$SKAFFOLD_VERSION/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/skaffold

      - name: Set default repo for Skaffold
        run: |
          skaffold config set default-repo "$SKAFFOLD_DEFAULT_REPO"

      - name: Delete all deployments and namespace
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-approval-$PR_NUMBER
          skaffold delete --namespace $NAMESPACE
          kubectl delete namespace $NAMESPACE

      - name: Cleaning up Pub/Sub
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e
          python -m pip install -r requirements.txt
          cd utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python pub_sub_cleanup.py

      - name: Cleaning up BQ
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd utils/
          python -m pip install -r requirements.txt
          BQ_DATASET=lms_analytics DATABASE_PREFIX=e2e_approval_pr${PR_NUMBER}_ python bq_cleanup.py

# cookiecutter:endraw
